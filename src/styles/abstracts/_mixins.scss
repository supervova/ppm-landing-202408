/* -----------------------------------------------------------------------------
 * Table of contents
 * -----------------------------------------------------------------------------
 *
 * grid-base                - Base grid layout with default column, row, and gap settings
 * grid-12                  - 12-column grid layout with specific settings
 * grid                     - Responsive grid layout combining base and 12-column layouts
 * grid-columns             - Generates column classes for grid with custom breakpoints
 * flex-base                - Base flex layout with default settings
 * flex-row                 - Use this one within media query. Change --items value to 2, 3 etc to define columns
 * container                - Centers content with a max-width and auto margins
 * centering-max-width      - Centers elements with a maximum width and customizable margins
 * heading-base             - Basic styles for headings including font and color
 * text-format              - Sets font size, line height, and padding for text elements
 * label                    - Styles for labels with optional uppercase transformation
 * text-truncate            - Single line text truncation with ellipsis
 * multiline-truncate       - Multi-line text truncation with ellipsis
 * multiline-truncate-reset - Resets multi-line truncation
 * border                   - Adds a border overlay with flex display and overflow handling
 * chevron-down             - Adds a chevron down icon with specific positioning and styles
 * utility-classes          - Generates utility classes based on provided properties
 * visually-hidden          - Hides elements visually but keeps them accessible
 * state-disabled           - Uses visual cues to indicate that the button is disabled
 * state-focus              - Adds a focus ring for accessibility
 * state-hover-a            - Adds a :hover underscore to links
 * menu-item                - Styles for menu items with padding, alignment, and focus behavior
 * button-base              - Base styles for buttons including alignment, cursor, and touch-action
 * button                   - Comprehensive button styles with customizable properties
 * button-primary           - Styles for primary buttons with specific background, color, and shadow
 * -------------------------------------------------------------------------- */

@use 'sass:map';
@use 'sass:math';
@use 'functions' as *;
@use 'config' as *;

/* -----------------------------------------------------------------------------
  * LAYOUT
  * -------------------------------------------------------------------------- */
// #region
@mixin grid-base() {
  --columns: 1fr;
  --rows: repeat(auto-fill, auto);
  --gap: var(--size-2);

  display: grid;
  gap: var(--gap);
  grid-template-columns: var(--columns);
  grid-template-rows: var(--rows);

  & > * {
    // HACK for grid and flex direct children in overflow
    // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
    min-width: 0;
  }
}

@mixin grid-12() {
  --columns: repeat(var(--columns, 12), minmax(0, 1fr));
  --rows: 1fr;
  --gap: var(--size-line);
}

@mixin grid() {
  @include grid-base();

  @media (--tablet) {
    @include grid-12();
  }
}

@mixin grid-columns($columns: 12, $screens: $mq-breakpoints-lg) {
  @each $screen in $screens {
    @media (--#{$screen}) {
      $class-base: null;

      // Classes aliases
      @if $screen != all {
        @for $i from 1 through $columns {
          // Create aliases for halves, thirds and fourths

          // stylelint-disable max-nesting-depth
          @if math.div($columns, $i) == 4 {
            $class-base: 1\/4;
          } @else if math.div($columns, $i) == 3 {
            $class-base: 1\/3;
          } @else if math.div($columns, $i) == 2 {
            $class-base: 1\/2;
          } @else if $i == 8 {
            $class-base: 2\/3;
          } @else if $i == 9 {
            $class-base: 3\/4;
          } @else {
            $class-base: $i;
          }

          // Prefixed classes
          @if $class-base != $i {
            .#{$screen}\:col-#{$class-base},
            .#{$screen}\:col-#{$i} {
              grid-column: auto / span $i;
            }
          } @else {
            .#{$screen}\:col-#{$class-base} {
              grid-column: auto / span $i;
            }
          }
        }
        // stylelint-enable max-nesting-depth

        // Offsets / Start position
        @for $i from 1 through ($columns - 1) {
          .#{$screen}\:col-start-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}

@mixin flex-base() {
  --items: 1;
  --gap: var(--size-2);

  display: flex;
  flex-direction: column;
  gap: var(--gap);
}

// Use this one within media query. Change --items value to 2, 3 etc to define columns
@mixin flex-row($items: 2, $gap: var(--size-4), $let-flex: false) {
  --gap: #{$gap};
  --items: #{$items};

  @if $let-flex {
    display: flex;
  }

  flex-direction: row;
  flex-wrap: wrap;

  > * {
    width: calc(
      100% / var(--items) - var(--gap) * (var(--items) - 1) / var(--items)
    );
  }
}

@mixin container($width: var(--width-container)) {
  margin-inline: auto;
  position: relative;
  width: min(calc(100% - var(--padding-x-container) * 2), $width);
}

@mixin centering-max-width(
  $width: var(--width-container),
  $margin: var(--size-2p5)
) {
  margin-inline: max($margin, calc(50% - $width / 2));
}
// #endregion

/* -----------------------------------------------------------------------------
  * TYPOGRAPHY
  * -------------------------------------------------------------------------- */
// #region

@mixin heading-base() {
  color: var(--color-ink-base);

  // OpenType kerning
  font-family: var(--font-family-title);
  font-feature-settings:
    'kern' 1,
    'liga' 1;
}

@mixin text-format($level) {
  font-size: var(--font-size-#{$level});
  line-height: var(--line-height-#{$level});
  padding-top: var(--padding-top-#{$level});
  padding-bottom: var(--padding-bottom-#{$level});
}

@mixin label($uppercase: true) {
  font-family: var(--font-family-base);
  font-size: var(--font-size-caption);
  font-weight: 500;
  letter-spacing: 0.2px;
  line-height: var(--line-height, var(--line-height-caption));

  @if $uppercase {
    text-transform: uppercase;
  }
}

@mixin text-truncate() {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

@mixin multiline-truncate($lines: 4, $line-height: rem(24), $padding-top: 0) {
  // All old stuff is required
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  display: -webkit-box;

  line-clamp: $lines;
  overflow: hidden;
  max-height: $lines * $line-height + $padding-top;
}

@mixin multiline-truncate-reset() {
  -webkit-box-orient: auto;
  -webkit-line-clamp: none;
  display: block;
  line-clamp: none;
  overflow: visible;
  max-height: none;
}

@mixin text-inline-block {
  display: inline-block;
  margin-block: -1 * rem(1);
  padding: rem(1) var(--size-1);
  vertical-align: baseline;
}
// #endregion

/* -----------------------------------------------------------------------------
  * GRAPHICS
  * -------------------------------------------------------------------------- */
// #region

@mixin border() {
  border-radius: var(--border-radius-base);

  display: flex;
  position: relative;
  overflow: hidden;
  max-width: max-content;

  // Border
  &::after {
    border-radius: var(--border-radius-base);
    box-shadow: inset 0 0 0 1px var(--color-ink-neutral-border);
    content: '';
    display: block;
    pointer-events: none;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }

  &:empty {
    display: none;
  }
}

@mixin chevron-down($icon-size: var(--size-icon)) {
  background-color: transparent;
  background-image: var(--icon-chevron-down);
  background-position: center;
  background-repeat: no-repeat;
  background-size: $icon-size;
  content: '';
  display: block;
  position: absolute;
  top: var(--chevron-top, var(--size-2));
  inset-inline-end: var(--chevron-end, var(--size-2));
  transition: transform var(--duration-xxs) var(--easing-base);
  width: $icon-size;
  height: $icon-size;
}
// #endregion

/* -----------------------------------------------------------------------------
  * UTILITIES / HELPERS
  * -------------------------------------------------------------------------- */
// #region

@mixin utility-classes($props) {
  // Generate classes for all breakpoints
  @each $property, $property-map in $props {
    $class-base: map.get($property-map, class-base);
    $values: map.get($property-map, values);

    @each $key, $value in $values {
      .#{$class-base}-#{$key} {
        #{$property}: $value;
      }
    }
  }

  // Generate adaptive classes for all media queries
  @each $screen in $mq-breakpoints {
    @media (--#{$screen}) {
      @each $property, $property-map in $props {
        $class-base: map.get($property-map, class-base);
        $values: map.get($property-map, values);

        @each $key, $value in $values {
          .#{$screen}\:#{$class-base}-#{$key} {
            #{$property}: $value;
          }
        }
      }
    }
  }
}

@mixin visually-hidden() {
  border: 0;
  clip: rect(0, 0, 0, 0);
  margin: -1px;
  padding: 0;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  height: 1px;
}

@mixin state-disabled() {
  // cursor 'not-allowed' is set in accessibility helper
  filter: grayscale(100%);
  opacity: 0.5;

  &:hover {
    // Prevent overwrite with --filter-brightness-up
    filter: grayscale(100%);
  }
}

@mixin state-focus($size: var(--size-half)) {
  outline: $size solid Highlight;
  outline: $size solid solid -webkit-focus-ring-color;
}

@mixin state-hover-a {
  text-decoration-skip-ink: auto;
  text-decoration: underline;
  text-decoration-thickness: max(0.08em, 1px);
  text-underline-offset: 0.125em;
}
// #endregion

/* -----------------------------------------------------------------------------
  * ELEMENTS
  * -------------------------------------------------------------------------- */
// #region

@mixin menu-item() {
  border-radius: var(--border-radius-sm);
  background-color: transparent;
  color: var(--menu-color, var(--color-ink-2ry));
  display: flex;
  align-items: center;
  gap: var(--size-1);
  justify-content: flex-start;
  font-size: inherit;
  font-weight: inherit;
  text-align: left;
  text-decoration: none;
  text-transform: none;
  padding: var(--menu-item-padding, var(--size-1) var(--size-2));
  position: relative;
  outline: 0;
  user-select: none;
  transition:
    background var(--duration-xxs),
    color var(--duration-xxs);
  width: 100%;

  &:focus-visible {
    @include state-focus();
  }

  &:is(:active, :focus-visible) {
    background-color: var(--color-ink-min);
    text-decoration: none;
  }
}

// BUTTONS
/* Mixins were created in order to quickly style the buttons of plugins, like woocommerce */
@mixin button-base() {
  appearance: button;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  flex-shrink: 0;
  justify-content: center;
  font-family: inherit;
  text-align: center;
  text-decoration: none;
  outline: 0;
  position: relative;
  // Disable gestures like ‘double-tap to zoom’.
  touch-action: manipulation;
  transition:
    background var(--duration-xxs) var(--easing-base),
    box-shadow var(--duration-xxs) var(--easing-base);
  user-select: none;
  vertical-align: middle;
  // HACK: By default, flex items won’t shrink below their minimum content size
  min-width: 0;

  &:focus-visible {
    @include state-focus();
  }
}

@mixin button(
  $btn-background: var(--color-ink-min),
  $btn-border-radius: var(--border-radius-pill),
  $btn-border: 0,
  $btn-box-shadow-hover: none,
  $btn-box-shadow: none,
  $btn-color: var(--color-brand-text)
) {
  background: $btn-background;
  border-radius: $btn-border-radius;
  border: $btn-border;
  box-shadow: $btn-box-shadow;
  color: $btn-color;
  font-weight: bolder;
  // Hanging characters are cropping by `overflow: hidden` and `line-height: 1`
  line-height: var(--height-btn);
  white-space: nowrap;
  // Show the overflow in Edge
  overflow: visible;
  padding-block: var(--padding-y-btn);
  padding-inline: var(--padding-x-btn);
  transition:
    background var(--duration-xxs) var(--easing-base),
    box-shadow var(--duration-xxs) var(--easing-base);
  max-width: 100%;
  height: var(--height-btn);

  @include label(false);
  @include button-base();

  // Use child span for text truncating with ellipsis
  > span {
    @include text-truncate();
  }

  &:active {
    filter: brightness(var(--filter-brightness-down));
  }

  @media (any-hover: hover) and (pointer: fine) {
    &:hover {
      box-shadow: $btn-box-shadow-hover;
      filter: brightness(var(--filter-brightness-up));
      text-decoration: none;
    }
  }
}

@mixin button-primary() {
  text-shadow: 0 1px 0 var(--color-ink-min);
  transition:
    filter var(--duration-xxs) var(--easing-base),
    box-shadow var(--duration-xxs) var(--easing-base);

  @include button(
    $btn-background: var(--color-brand-gradient-dark),
    $btn-background-hover: var(--color-brand-gradient-dark),
    $btn-color: var(--color-ink-inverse-base),
    $btn-box-shadow: (
      0 1px 1px hsl(var(--color-shadow) / 0.24),
      inset 0 0 0 1px hsl(var(--color-shadow) / 0.24),
      inset 0 2px 0 hsl(var(--h) var(--sn) 99% / 0.16),
    )
  );

  .icon {
    --icon-fill: var(--color-brand-bg-light);
    --icon-stroke: var(--color-brand-bg-light);
  }
}
// #endregion
